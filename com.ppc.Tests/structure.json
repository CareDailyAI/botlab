{
  # This bot extends a foundational bot framework for microservices
  "extends": "com.ppc.Bot",

  # Share microservices across multiple bots by copying the target end-directory into the local /intelligence directory
  "microservices": [
    "com.ppc.Microservices/intelligence/absent_ml_example",
    "com.ppc.Microservices/intelligence/analytics_amplitude",
    "com.ppc.Microservices/intelligence/analytics_mixpanel",
    "com.ppc.Microservices/intelligence/dailyreport",
    "com.ppc.Microservices/intelligence/dashboard",
    "com.ppc.Microservices/intelligence/data_request",
    "com.ppc.Microservices/intelligence/daylight",
    "com.ppc.Microservices/intelligence/last_seen",
    "com.ppc.Microservices/intelligence/messaging",
    "com.ppc.Microservices/intelligence/multistream",
    "com.ppc.Microservices/intelligence/tasks",
    "com.ppc.Microservices/intelligence/videoai",
    "com.ppc.Microservices/intelligence/welcome"
  ],

  # Safely delete these microservice packages from the service, without resetting live bot instances
  # Double check that the microservices listed here do not appear in the list of 'microservices' above.
  "safe_delete_microservices": [
  ],

  # Locally install the following Python package dependencies when using this microservice
  # Do not include any Python packages in this list that will compile .so/.dll library files natively
  # because they may not be able to run on the Linux-based server environment.
  "pip_install": [
  ],

  # Remotely install the following Python package dependencies
  # This will compile library files at the server in a Linux environment.
  # Note that when installed on Linux, some Python packages may get significantly inflated (like scipy and numpy)
  # due to the addition of hidden .libs directories that end up exceeding the maximum size of a bot
  # (50MB compressed / 250MB uncompressed).
  "pip_install_remotely": [
  ]

}
